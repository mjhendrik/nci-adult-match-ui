version: "3"
services:
  ui:
    build:
      context: .
      dockerfile: ./.docker/dockerfile.dev
    image: "fnlcr/nci-adult-match-ui-dev"
    ports:
      - '5555:5555'

  patient-api:
    image: "fnlcr/nci-adult-match-patient-api"
    command: python app.py
    ports:
      - "5000:5000"
    depends_on:
      - mongo
    environment:
      - MONGODB_URI=mongodb://mongo:27017/Match
      - ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
    # volumes: # this config is to override the default Patient API assay rules config. Normally commented out.
    #   - ./misc/config/nci-adult-match-patient-api-assay_activation_rules.json:/usr/app/config/assay_activation_rules.json
    networks:
      - adult-match

  treatment-arm-api:
    image: "fnlcr/nci-adult-match-treatment-arm-api"
    command: python app.py
    ports:
      - "5010:5010"
    depends_on:
      - mongo
    environment:
      - MONGODB_URI=mongodb://mongo:27017/Match
      - ENVIRONMENT=development
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
    networks:
      - adult-match

  ion-reporters-api:
    image: "fnlcr/nci-match-ion-reporters-api"
    command: python app.py
    ports:
      - "3001:3001"
    depends_on:
      - dynamo
    environment:
      - ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - STUDY_ID=EAY131
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_MANAGEMENT_ID=${AUTH0_MANAGEMENT_ID}
      - AUTH0_MANAGEMENT_SECRET=${AUTH0_MANAGEMENT_SECRET}
      - AWS_SMTP_USERNAME=${AWS_SMTP_USERNAME}
      - AWS_SMTP_PASSWORD=${AWS_SMTP_PASSWORD}
      - SLACK_TOKEN=${SLACK_TOKEN}
    volumes:
      - ./misc/config/nci-match-ion-reporters-api.environment.yml:/usr/app/config/environment.yml
    networks:
      - adult-match

  sample-controls-api:
    image: "fnlcr/nci-match-sample-controls-api"
    command: python app.py
    ports:
      - "3002:3002"
    depends_on:
      - dynamo
    environment:
      - ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - STUDY_ID=EAY131
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_MANAGEMENT_ID=${AUTH0_MANAGEMENT_ID}
      - AUTH0_MANAGEMENT_SECRET=${AUTH0_MANAGEMENT_SECRET}
      - AWS_SMTP_USERNAME=${AWS_SMTP_USERNAME}
      - AWS_SMTP_PASSWORD=${AWS_SMTP_PASSWORD}
      - SLACK_TOKEN=${SLACK_TOKEN}
    volumes:
      - ./misc/config/nci-match-sample-controls-api.environment.yml:/usr/app/config/environment.yml
    networks:
      - adult-match

  aliquots-api:
    image: "fnlcr/nci-match-aliquots-api"
    command: python app.py
    ports:
      - "3003:3003"
    depends_on:
      - dynamo
    environment:
      - ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - STUDY_ID=EAY131
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_MANAGEMENT_ID=${AUTH0_MANAGEMENT_ID}
      - AUTH0_MANAGEMENT_SECRET=${AUTH0_MANAGEMENT_SECRET}
      - AWS_SMTP_USERNAME=${AWS_SMTP_USERNAME}
      - AWS_SMTP_PASSWORD=${AWS_SMTP_PASSWORD}
      - SLACK_TOKEN=${SLACK_TOKEN}
    volumes:
      - ./misc/config/nci-match-aliquots-api.environment.yml:/usr/app/config/environment.yml
    networks:
      - adult-match

  ir-processor-api:
    image: "fnlcr/nci-match-ir-processor-api"
    command: celery -A tasks.tasks worker --loglevel=INFO --concurrency=1
    ports:
      - "3004:3004"
    depends_on:
      - dynamo
    environment:
      - ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - STUDY_ID=EAY131
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_DATABASE=${AUTH0_DATABASE}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_MANAGEMENT_ID=${AUTH0_MANAGEMENT_ID}
      - AUTH0_MANAGEMENT_SECRET=${AUTH0_MANAGEMENT_SECRET}
      - AWS_SMTP_USERNAME=${AWS_SMTP_USERNAME}
      - AWS_SMTP_PASSWORD=${AWS_SMTP_PASSWORD}
      - SLACK_TOKEN=${SLACK_TOKEN}
    volumes:
      - ./misc/config/nci-match-ir-processor-api.environment.yml:/usr/app/config/environment.yml
    networks:
      - adult-match

  message-api:
    image: "fnlcr/nci-adult-match-message-api:latest"
    ports:
      - "10250:10250"
      - "8282:8080"
    depends_on:
      - mongo
    environment:
      - ENVIRONMENT=dev 
      - JAVA_OPTIONS=$ADULT_MATCH_MESSAGE_API_JAVA_OPTIONS
      - MONGODB_URI=mongodb://mongo:27017/Match
      - AWS_REGION=$AWS_REGION 
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID 
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
      - AUTH0_DOMAIN=$AUTH0_DOMAIN 
      - AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID 
      - AUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET 
    volumes:
      - $HOME/config/nci-adult-match/nci-adult-match-message-api.properties:/matchbox-dev.properties
    networks:
      - adult-match

  mongo:
    image: mongo:3.4.0
    volumes:
      - ./misc/data_setup/match:/backup
    ports:
      - "27018:27017" # Expose 27018 to avoid possible conflicting with the local MongoDB
    networks:
      - adult-match

  dynamo:
    image: matchbox/dynamodb-local
    volumes:
      - dynamo-data:/dynamodb_local
    ports:
      - "8001:8000" # Expose 8001 to avoid possible conflicting with the local DynamoDB
    networks:
      - adult-match

volumes:
  dynamo-data:
  mongo-data:

networks:
  adult-match:
    external:
      name: adult-match-net
